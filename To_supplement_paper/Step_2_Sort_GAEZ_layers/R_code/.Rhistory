# read libraries
library(ggplot2)
library(tidyr)
library(dplyr)
# create data
data1.x = rnorm(50,-16,1)
data1.y = rnorm(50,4,1)
data2.x = rnorm(50,-13,1.5)
data2.y = rnorm(50,1.5,1)
data_frame = as.data.frame(cbind(c(data1.x,data2.x),c(data1.y,data2.y),
c(rep('data_1',50),rep('data_2',50)),
c(seq(1,50),seq(1,50))))
colnames(data_frame) = c('X','Y','Group','ID')
data_frame$X = as.numeric(data_frame$X)
data_frame$Y = as.numeric(data_frame$Y)
data_frame
View(data_frame)
colnames(data_frame) = c('血压','血脂','Group','ID')
data_frame$血压 = as.numeric(data_frame$血压)
colnames(data_frame) = c('X','Y','Group','ID')
data_frame$X = as.numeric(data_frame$X)
data_frame$Y = as.numeric(data_frame$Y)
data_frame$Group = as.factor(data_frame$Group)
X
X
X
X
X
colnames(data_frame) = c('X','Y','Group','ID')
data_frame$X = as.numeric(data_frame$X)
data_frame$Y = as.numeric(data_frame$Y)
data_frame$Group = as.factor(data_frame$Group)
# plot with scatter
data_frame %>%
ggplot(aes(X,Y))
# plot with scatter
data_frame %>%
ggplot(aes(X,Y))+
geom_point(aes(color=Gropu))
# plot with scatter
data_frame %>%
ggplot(aes(X,Y))+
geom_point(aes(color=Group))
# plot with scatter
fig_base = data_frame %>%
ggplot(aes(X,Y))+
geom_point(aes(color=Group))
# ==> simple theme
fig_theme = fig_base +
theme_classic()
fig_theme
# ==> change color
fig_color = fig_theme +
scale_color_manual(values = c('data_1'='#d316d4','data_2' = '#93bc59'),
labels = c('Before','After'))
fig_color
# ==> change color
fig_color = fig_theme +
scale_color_manual(values = c('data_1'='#d316d4','data_2' = '#93bc59'),
labels = c('Before','After'),
name = '')
fig_color
# ==> change y scale
fig_y_scale = fig_color +
scale_y_continuous(breaks = seq(-1,10,1))
fig_y_scale
# ==> legend position
fig_legend = fig_y_scale +
theme(legend.position = c(0.8,0.8))
fig_legend
# ==> legend position
fig_legend = fig_y_scale +
theme(legend.position = c(0.8,0.9))
fig_legend
# =============== Box plot ==================
data_frame %>%
ggplot(aes(Group)) +
geom_boxplot()
# =============== Box plot ==================
data_frame %>%
ggplot(aes(group = Group)) +
geom_boxplot()
# =============== Box plot ==================
data_frame %>%
ggplot(aes(Group,Y)) +
geom_boxplot()
# import libraries
library(ggplot2)
library(tidyr)
data1.x = rnorm(50,-16,1)
data1.y = rnorm(50,4,1)
data2.x = rnorm(50,-13,1.5)
data2.y = rnorm(50,1.5,1)
# define variables
data_frame = as.data.frame(cbind(c(data1.x,data2.x),c(data1.y,data2.y),
c(rep('data_1',50),rep('data_2',50)),
c(seq(1,50),seq(1,50))))
colnames(data_frame) = c('X','Y','Group','ID')
data_frame$X = as.numeric(data_frame$X)
data_frame$Y = as.numeric(data_frame$Y)
data_frame$Group = as.factor(data_frame$Group)
View(data_frame)
# =================== Scatter plot =====================
data_frame %>%
ggplot(aes(x = X,y = Y))
data_frame %>%
ggplot(aes(x = X,y = Y)) +
geom_point()
# =================== Scatter plot =====================
data_frame %>%
ggplot(aes(x = X,y = Y)) +
geom_point(aes(color=Group))
# =================== Scatter plot =====================
fig_base = data_frame %>%
ggplot(aes(x = X,y = Y)) +
geom_point(aes(color=Group))
# ==> change theme
fig_theme = fig_base +
theme_classic()
fig_theme
1,2,3
c(1,2,3)
fig_theme +
theme(legend.position = c(0.8,0.9))
fig_theme +
theme(legend.position = c(0.8,0.8))
fig_legend +
scale_color_manual(values = c('data_1' = '#d808e0','data_2' = '#dc17da'),
lables = c('Data 1','Data 2'),
name = '')
# ==> change legend position
fig_legend = fig_theme +
theme(legend.position = c(0.8,0.8))
fig_legend +
scale_color_manual(values = c('data_1' = '#d808e0','data_2' = '#dc17da'),
lables = c('Data 1','Data 2'),
name = '')
# ==> change legend position
fig_legend = fig_theme +
theme(legend.position = c(0.8,0.8))
fig_legend
# ==> change legend name
fig_legend_name = fig_legend +
scale_color_manual(values = c('data_1' = '#d808e0','data_2' = '#dc17da'),
lables = c('Data 1','Data 2'),
name = '')
fig_legend +
scale_color_manual(values = c(data_1 = '#d555d0',data_2='#88a259'),
labels = c('Group 1','Group 2'),
name = 'Legend')
# ==> change y  scale
fig_y_scale = fig_legend_name +
scale_y_continuous(breaks = seq(-1,10,1))
fig_legend_name +
scale_y_continuous(breaks = seq(-1,10,1))
# ==> change y  scale
fig_y_scale = fig_legend_name +
scale_y_continuous(breaks = seq(-1,10,1))
# ==> change legend name
fig_legend_name = fig_legend +
scale_color_manual(values = c(data_1 = '#d555d0',data_2='#88a259'),
labels = c('Group 1','Group 2'),
name = 'Legend')
# ==> change y  scale
fig_y_scale = fig_legend_name +
scale_y_continuous(breaks = seq(-1,10,1))
fig_legend_name +
scale_y_continuous(breaks = seq(-1,10,1))
# ================ Box plot ======================
data_frame %>%
ggplot(aes(x=Group,y=Y))
# ================ Box plot ======================
data_frame %>%
ggplot(aes(x=Group,y=Y)) +
geom_boxplot()
# ================ Box plot ======================
data_frame %>%
ggplot(aes(x=Group,y=Y)) +
geom_boxplot(aes(color = Group))
# ================ Box plot ======================
data_frame %>%
ggplot(aes(x=Group,y=Y)) +
geom_boxplot(aes(color = Group)) +
theme_classic()
# ================ Box plot ======================
data_frame %>%
ggplot(aes(x=Group,y=Y)) +
geom_boxplot(aes(color = Group)) +
theme_classic() +
scale_color_manual(values = c(data_1 = '#d555d0',data_2='#88a259'),
labels = c('Group 1','Group 2'),
name = 'Legend')
+
theme(legend.position = c(0.8,0.8))
# ================ Box plot ======================
data_frame %>%
ggplot(aes(x=Group,y=Y)) +
geom_boxplot(aes(color = Group)) +
theme_classic() +
scale_color_manual(values = c(data_1 = '#d555d0',data_2='#88a259'),
labels = c('Group 1','Group 2'),
name = 'Legend')+
theme(legend.position = '')
# ================ Box plot ======================
data_frame %>%
ggplot(aes(x=Group,y=Y)) +
geom_boxplot(aes(color = Group)) +
geom_jitter() +
theme_classic() +
scale_color_manual(values = c(data_1 = '#d555d0',data_2='#88a259'),
labels = c('Group 1','Group 2'),
name = 'Legend')+
theme(legend.position = '')
# ================ Box plot ======================
data_frame %>%
ggplot(aes(x=Group,y=Y)) +
geom_boxplot(aes(color = Group)) +
geom_jitter(width = 0.3) +
theme_classic() +
scale_color_manual(values = c(data_1 = '#d555d0',data_2='#88a259'),
labels = c('Group 1','Group 2'),
name = 'Legend')+
theme(legend.position = '')
# ================ Box plot ======================
data_frame %>%
ggplot(aes(x=Group,y=Y)) +
geom_boxplot(aes(color = Group)) +
geom_jitter(width = 0.1) +
theme_classic() +
scale_color_manual(values = c(data_1 = '#d555d0',data_2='#88a259'),
labels = c('Group 1','Group 2'),
name = 'Legend')+
theme(legend.position = '')
library(lme4)
library(ggplot2)
library(dplyr)
library(merTools)
library(arm)
# set cwd
cwd = paste0('C:/Users/Lenovo/OneDrive - Deakin University/',
'PHD Progress/Paper_3/Earth_Engine_codes/',
'Step_2_UNET_predict_future_urbanization/R_code')
setwd(cwd)
# get data
data = read.csv('../result_csv/GDP_Pop_NCP_urban_count.csv')
# set cwd
cwd = paste0('C:/Users/Lenovo/OneDrive - Deakin University/',
'PHD Progress/Paper_3/Earth_Engine_codes/',
'Step_2_Sort_GAEZ_layers/R_code')
setwd(cwd)
# get data
data = read.csv('../result_csv/GDP_Pop_NCP_urban_count.csv')
# set cwd
cwd = paste0('C:/Users/Lenovo/OneDrive - Deakin University/',
'PHD Progress/Paper_3/Earth_Engine_codes/',
'Step_1_UNET_predict_future_urbanization/R_code')
setwd(cwd)
# get data
data = read.csv('../result_csv/GDP_Pop_NCP_urban_count.csv')
library(lme4)
library(ggplot2)
library(dplyr)
library(merTools)
library(arm)
# set cwd
cwd = paste0('C:/Users/Lenovo/OneDrive - Deakin University/',
'PHD Progress/Paper_3/Earth_Engine_codes/',
'Step_2_UNET_predict_future_urbanization/R_code')
setwd(cwd)
# get data
data = read.csv('../result_csv/GDP_Pop_NCP_urban_count.csv')
data_future = read.csv('../result_csv/SSP_GDP_Pop_future.csv')
# build model
model = lmer('count ~ GDP + Pop + (1+GDP|Province) + (1+Pop|Province)',data=data)
# check the model by aligning pred with ture values
pred = predict(object = model,data)
true = data$count
df = data.frame(pred=pred,true=true,Province=data$Province)
# plot the comparison
df%>%
ggplot()+
geom_point(aes(true,pred,color=Province))
data_future$'count_pred' = predict(object = model,data_future)
ggplot() +
geom_point(aes(x = year,y=count,color=Province),data = data) +
geom_line(aes(x=year,y=mean,color=Province),data =
data_future%>%
group_by(Province,year) %>%
summarise(mean=mean(count_pred) ))
# save prediction to disk
write.csv(x = data_future,
file = '../result_csv/SSP_GDP_Pop_future_pred.csv',
row.names = FALSE)
library(lme4)
library(ggplot2)
library(dplyr)
library(merTools)
library(arm)
library(brms)
# set cwd
cwd = paste0('C:/Users/Lenovo/OneDrive - Deakin University/',
'PHD Progress/Paper_3/Earth_Engine_codes/',
'Step_2_UNET_predict_future_urbanization/R_code')
setwd(cwd)
# get data
data = read.csv('../result_csv/GDP_Pop_NCP_urban_count.csv')
data_future = read.csv('../result_csv/SSP_GDP_Pop_future.csv')
# build model
model = lmer('count ~ GDP + Pop + (1+GDP|Province) + (1+Pop|Province)',data=data)
# check the model by aligning pred with ture values
pred = predict(object = model,data)
true = data$count
df = data.frame(pred=pred,true=true,Province=data$Province)
# plot the comparison
df%>%
ggplot()+
geom_point(aes(true,pred,color=Province))
data_future$'count_pred' = predict(object = model,data_future)
ggplot() +
geom_point(aes(x = year,y=count,color=Province),data = data) +
geom_line(aes(x=year,y=mean,color=Province),data =
data_future%>%
group_by(Province,year) %>%
summarise(mean=mean(count_pred) ))
model_brms = brm('count ~ GDP + Pop + (Pop + GDP|Province)',
data=data)
pred_brms_original = predict(object = model_brms,data)
pred_brms_future = predict(object = model_brms,data_future)
View(data_future)
View(data)
View(data_future)
df%>%
ggplot()+
geom_point(aes(true,pred,color=Province))
# making df for ploting
df_brms = data.frame(pred=pred_brms_original,true=true,Province=data$Province)
df_brms%>%
ggplot()+
geom_point(aes(true,pred,color=Province))
View(df_brms)
# plot the comparison
df%>%
ggplot()+
geom_point(aes(true,pred,color=Province))
View(pred_brms_future)
View(data_future)
data_future$'brms_future' = pred_brms_future$'estimate'
pred_brms_future$'estimate'
pred_brms_future$'Estimate'
col(pred_brms_future)
colnames(pred_brms_future$)
colnames(pred_brms_future)
pred_brms_future$'Estimate'
as.data.frame(pred_brms_future)
pred_brms_future = as.data.frame(predict(object = model_brms,data_future))
data_future$'brms_future' = pred_brms_future$'Estimate'
data_future$'brms_future_low' = pred_brms_future$'Q2.5'
data_future$'brms_future_high' = pred_brms_future$'Q97.5'
ggplot() +
geom_point(aes(x = year,y=count,color=Province),data = data) +
geom_line(aes(x=year,y=mean_brms,color=Province),data =
data_future%>%
group_by(Province,year) %>%
summarise(mean_brms=mean(brms_future)))
ggplot() +
geom_point(aes(x = year,y=count,color=Province),data = data) +
geom_line(aes(x=year,y=mean_brms,color=Province),data =
data_future%>%
group_by(Province,year) %>%
summarise(mean_brms=mean(brms_future)) +
geom_ribbon(aes(x=year,ymin=mean_brms_low,ymax=mean_brms_high,fill=Province),
data = data_future%>%
group_by(Province,year) %>%
summarise(mean_brms_low=mean(Q2.5),
mean_brms_high=mean(Q97.5))))
ggplot() +
geom_point(aes(x = year,y=count,color=Province),data = data) +
geom_line(aes(x=year,y=mean_brms,color=Province),data =
data_future%>%
group_by(Province,year) %>%
summarise(mean_brms=mean(brms_future)) +
geom_ribbon(aes(x=year,ymin=low,ymax=high,fill=Province),
data = data_future%>%
group_by(Province,year) %>%
summarise(low=mean(mean_brms_low),
high=mean(mean_brms_high))))
data_future%>%
group_by(Province,year) %>%
summarise(low=mean(mean_brms_low),
high=mean(mean_brms_high))
ggplot() +
geom_point(aes(x = year,y=count,color=Province),data = data) +
geom_line(aes(x=year,y=mean_brms,color=Province),data =
data_future%>%
group_by(Province,year) %>%
summarise(mean_brms=mean(brms_future)) +
geom_ribbon(aes(x=year,ymin=low,ymax=high,fill=Province),
data = data_future%>%
group_by(Province,year) %>%
summarise(low=mean(brms_future_low),
high=mean(brms_future_high))))
ggplot() +
geom_point(aes(x = year,y=count,color=Province),data = data) +
geom_line(aes(x=year,y=mean_brms,color=Province),data =
data_future%>%
group_by(Province,year) %>%
summarise(mean_brms=mean(brms_future))) +
geom_ribbon(aes(x=year,ymin=low,ymax=high,fill=Province),
data = data_future%>%
group_by(Province,year) %>%
summarise(low=mean(brms_future_low),
high=mean(brms_future_high)))
ggplot() +
geom_point(aes(x = year,y=count,color=Province),data = data) +
geom_line(aes(x=year,y=mean_brms,color=Province),data =
data_future%>%
group_by(Province,year) %>%
summarise(mean_brms=mean(brms_future))) +
geom_ribbon(aes(x=year,ymin=low,ymax=high,fill=Province),alpha=0.3
data = data_future%>%
group_by(Province,year) %>%
summarise(low=mean(brms_future_low),
high=mean(brms_future_high)))
ggplot() +
geom_point(aes(x = year,y=count,color=Province),data = data) +
geom_line(aes(x=year,y=mean_brms,color=Province),data =
data_future%>%
group_by(Province,year) %>%
summarise(mean_brms=mean(brms_future))) +
geom_ribbon(aes(x=year,ymin=low,ymax=high,fill=Province),alpha=0.3,
data = data_future%>%
group_by(Province,year) %>%
summarise(low=mean(brms_future_low),
high=mean(brms_future_high)))
# save prediction to disk
write.csv(x = data_future,
file = '../result_csv/SSP_GDP_Pop_future_pred.csv',
row.names = FALSE)
